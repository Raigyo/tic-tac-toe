{"ast":null,"code":"import _slicedToArray from \"/home/chilot/becode/react/tic-tac-toe/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/home/chilot/becode/react/tic-tac-toe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/chilot/becode/react/tic-tac-toe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/chilot/becode/react/tic-tac-toe/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/chilot/becode/react/tic-tac-toe/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/chilot/becode/react/tic-tac-toe/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/chilot/becode/react/tic-tac-toe/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n/*class Square extends React.Component {\n  constructor(props) {\n    //add a constructor to the class to initialize the state\n    super(props);\n    //All React component classes that have a constructor should start it with a super(props) call.\n    this.state = {\n      value: null,\n    };\n  }\n\n  render() {\n    return (\n      <button\n        className=\"square\"\n        onClick={() => this.props.onClick()}\n      >\n        {this.props.value}\n      </button>\n    );\n  }\n}*/\n// function components are a simpler way to write components that only contain\n// a render method and don’t have their own state.\n// Instead of defining a class which extends React.Component,\n// we can write a function that takes props as input and returns what should be rendered.\n// Function components are less tedious to write than classes, and many components\n// can be expressed this way.\n\nfunction Square(props) {\n  return React.createElement(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, props.value);\n}\n\nvar Board =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Board, _React$Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      squares: Array(9).fill(null),\n      //Add a constructor to the Board and set the Board’s initial state\n      //to contain an array of 9 nulls corresponding to the 9 squares\n      xIsNext: true //boolean that will be flipped to determine which player goes next\n\n    };\n    return _this;\n  }\n\n  _createClass(Board, [{\n    key: \"handleClick\",\n    value: function handleClick(i) {\n      var squares = this.state.squares.slice();\n\n      if (calculateWinner(squares) || squares[i]) {\n        return;\n      } //ignores a click if someone has won the game or if a Square is already filled\n\n\n      squares[i] = this.state.xIsNext ? 'X' : 'O'; //the Square components are now controlled components. The Board has full control over them\n      //.slice() creates a copy of the squares array to modify instead of modifying the existing array\n\n      this.setState({\n        squares: squares,\n        xIsNext: !this.state.xIsNext //With this change, “X”s and “O”s can take turns\n\n      });\n    }\n  }, {\n    key: \"renderSquare\",\n    value: function renderSquare(i) {\n      var _this2 = this;\n\n      return React.createElement(Square //return <Square value={this.state.squares[i]} />;\n      // value={this.state.squares[i]}\n      // onClick={() => this.handleClick(i)}\n      //pass a prop called value to the Square ('X', 'O', or null)\n      //we’ll pass down a function from the Board to the Square, and we’ll have Square call that function when a square is clicked\n      , {\n        value: this.props.squares[i],\n        onClick: function onClick() {\n          return _this2.props.onClick(i);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var winner = calculateWinner(this.state.squares); //default X, displays which player has the next turn\n\n      var status;\n\n      if (winner) {\n        status = 'Winner: ' + winner;\n      } else {\n        status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"status\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, status), React.createElement(\"div\", {\n        className: \"board-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)), React.createElement(\"div\", {\n        className: \"board-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)), React.createElement(\"div\", {\n        className: \"board-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)));\n    }\n  }]);\n\n  return Board;\n}(React.Component); // this function will check for a winner and return 'X', 'O', or null as appropriate\n//Game history\n\n\nvar Game =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(Game, _React$Component2);\n\n  function Game(props) {\n    var _this3;\n\n    _classCallCheck(this, Game);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(Game).call(this, props));\n    _this3.state = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      xIsNext: true\n    };\n    return _this3;\n  }\n\n  _createClass(Game, [{\n    key: \"render\",\n    value: function render() {\n      var history = this.state.history;\n      var current = history[history.length - 1];\n      var winner = calculateWinner(current.squares);\n      var status;\n\n      if (winner) {\n        status = 'Winner: ' + winner;\n      } else {\n        status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n      }\n\n      return React.createElement(\"div\", {\n        className: \"game\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"game-board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(Board, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"game-info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }), React.createElement(\"ol\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Game;\n}(React.Component); // ========================================\n\n\nReactDOM.render(React.createElement(Game, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 160\n  },\n  __self: this\n}), document.getElementById('root'));\n\nfunction calculateWinner(squares) {\n  var lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (var i = 0; i < lines.length; i++) {\n    var _lines$i = _slicedToArray(lines[i], 3),\n        a = _lines$i[0],\n        b = _lines$i[1],\n        c = _lines$i[2];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}","map":{"version":3,"sources":["/home/chilot/becode/react/tic-tac-toe/src/index.js"],"names":["React","ReactDOM","Square","props","onClick","value","Board","state","squares","Array","fill","xIsNext","i","slice","calculateWinner","setState","winner","status","renderSquare","Component","Game","history","current","length","render","document","getElementById","lines","a","b","c"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\n/*class Square extends React.Component {\n  constructor(props) {\n    //add a constructor to the class to initialize the state\n    super(props);\n    //All React component classes that have a constructor should start it with a super(props) call.\n    this.state = {\n      value: null,\n    };\n  }\n\n  render() {\n    return (\n      <button\n        className=\"square\"\n        onClick={() => this.props.onClick()}\n      >\n        {this.props.value}\n      </button>\n    );\n  }\n}*/\n\n// function components are a simpler way to write components that only contain\n// a render method and don’t have their own state.\n// Instead of defining a class which extends React.Component,\n// we can write a function that takes props as input and returns what should be rendered.\n// Function components are less tedious to write than classes, and many components\n// can be expressed this way.\n\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n      //Add a constructor to the Board and set the Board’s initial state\n      //to contain an array of 9 nulls corresponding to the 9 squares\n      xIsNext: true,\n      //boolean that will be flipped to determine which player goes next\n    };\n  }\n\n  handleClick(i) {\n    const squares = this.state.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    //ignores a click if someone has won the game or if a Square is already filled\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    //the Square components are now controlled components. The Board has full control over them\n    //.slice() creates a copy of the squares array to modify instead of modifying the existing array\n    this.setState({\n      squares: squares,\n      xIsNext: !this.state.xIsNext,\n      //With this change, “X”s and “O”s can take turns\n    });\n  }\n\n  renderSquare(i) {\n    return (\n      <Square\n      //return <Square value={this.state.squares[i]} />;\n        // value={this.state.squares[i]}\n        // onClick={() => this.handleClick(i)}\n        //pass a prop called value to the Square ('X', 'O', or null)\n        //we’ll pass down a function from the Board to the Square, and we’ll have Square call that function when a square is clicked\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  render() {\n    const winner = calculateWinner(this.state.squares);\n    //default X, displays which player has the next turn\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return (\n      <div>\n        <div className=\"status\">{status}</div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}// this function will check for a winner and return 'X', 'O', or null as appropriate\n\n\n//Game history\nclass Game extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n      }],\n      xIsNext: true,\n    };\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const winner = calculateWinner(current.squares);\n\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board />\n        </div>\n        <div className=\"game-info\">\n          <div>{/* status */}</div>\n          <ol>{/* TODO */}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}